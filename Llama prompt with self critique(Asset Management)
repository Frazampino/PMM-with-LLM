import os
import xml.etree.ElementTree as ET
from itertools import combinations
import ollama

# Memoria globale degli errori
global_error_log = []

# ===========================
# Funzioni EPML
# ===========================

def epml_to_xml(file_path):
    """Legge un file EPML e restituisce il contenuto XML come stringa."""
    tree = ET.parse(file_path)
    root = tree.getroot()
    return ET.tostring(root, encoding='unicode')

def compare_epml_files(file1, file2):
    """Confronta due modelli EPML tramite Llama 3."""
    name1, name2 = os.path.basename(file1), os.path.basename(file2)
    
    xml1 = epml_to_xml(file1)
    xml2 = epml_to_xml(file2)

    prompt = f"""Compare the following two EPML models (Event-driven Process Chains) in XML format and assess their similarity:

EPML Model 1 ({name1}):
{xml1}

EPML Model 2 ({name2}):
{xml2}

Instructions:
1. Provide a similarity matching score from 0 to 1, with a brief explanation.
2. Identify one-to-one mappings between **functions** in both models, with explanations.
3. Identify complex mappings:
   - 1:N mappings
   - N:M mappings
   - If none exist, explicitly state so.
4. Compare overall structure:
   - Number and role of events, functions, connectors, edges.
   - Highlight differences in logical connectors (AND/XOR/OR splits and joins).
   - Describe cycles, concurrency, missing or additional elements.

Respond in a clear, structured, and detailed format."""

    response = ollama.chat(model='llama3', messages=[{'role': 'user', 'content': prompt}])
    content = response['message']['content']

    print(f"\n=== EPML Comparison: {name1} vs {name2} ===\n")
    print(content)
    print("\n" + "="*80 + "\n")

    global_error_log.append({
        "pair": f"{name1} vs {name2}",
        "report": content
    })

# ===========================
# Batch Comparison EPML
# ===========================

def batch_compare_epml_files(epml_files):
    """Confronta tutte le combinazioni di file EPML."""
    for f1, f2 in combinations(epml_files, 2):
        try:
            compare_epml_files(f1, f2)
        except FileNotFoundError as e:
            print(f"File non trovato: {e}")
        except Exception as e:
            print(f"Errore durante il confronto {f1} vs {f2}: {e}")

    # Riepilogo globale errori
    print("\n\n========== GLOBAL ERROR SUMMARY ==========\n")
    error_categories = {
        "False Positive": 0,
        "False Negative": 0,
        "Scope Mismatch": 0,
        "Overgeneralization": 0,
        "Ambiguity": 0
    }

    for entry in global_error_log:
        text = entry["report"]
        for cat in error_categories.keys():
            error_categories[cat] += text.count(cat)

    print("Error categories across ALL comparisons:\n")
    for cat, count in error_categories.items():
        print(f"- {cat}: {count}")

# ===========================
# Esecuzione
# ===========================

epml_files = [
    "target-model.epml",
    "source-model.epml",
    "target-model1.epml",
    "source-model1.epml,
    "target-model2.epml",
    "source-model2.epml",
    "target-model3.epml",
    "source-model3.epml,
    "target-model4.epml",
    "source-model4.epml",
    "target-model5.epml",
    "source-model5.epml,
    "target-model6.epml",
    "source-model6.epml",
    "target-model7.epml",
    "source-model7.epml,
    
]

batch_compare_epml_files(epml_files)
